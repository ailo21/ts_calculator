{"version":3,"sources":["types/types.tsx","components/NumBtn.tsx","components/OperationBtn.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["operationEnum","NumBtn","num","onClick","type","shape","OperationBtn","operation","App","useState","firstNum","setFirstNum","selectOperation","setSelectOperation","secondNum","setSecondNum","displayText","setDisplayText","clickHandlerNum","undefined","temp","toString","Number","clickHandlerOperation","clear","equals","result","fold","subtract","multiply","division","Error","useEffect","className","readOnly","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d31cb243.chunk.js","sourcesContent":["export enum operationEnum {\r\n    fold = \"+\",\r\n    subtract = \"-\",\r\n    multiply = \"*\",\r\n    division = \"/\",\r\n    equals = \"=\",\r\n    clear = \"c\",\r\n}","import React, {FC} from 'react';\r\nimport { Button} from 'antd';\r\n\r\ninterface NumBtnProps {\r\n    num: number,\r\n    onClick: (num:number) => void\r\n}\r\n\r\nconst NumBtn: FC<NumBtnProps> = ({num,onClick}) => {\r\n    return (\r\n        <Button  type=\"ghost\" shape=\"circle\" onClick={()=>onClick(num)}>\r\n            {num}\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default NumBtn;\r\n","import React, {FC} from 'react';\r\nimport {operationEnum} from \"../types/types\";\r\nimport { Button} from 'antd';\r\n\r\ninterface OperationBtnProps{\r\n    operation:operationEnum,\r\n    onClick:(operation:operationEnum)=>void\r\n}\r\n\r\n\r\n\r\nconst OperationBtn:FC<OperationBtnProps> = ({operation,onClick}) => {\r\n    return (\r\n        <Button   type=\"primary\" shape=\"circle\"  onClick={()=>onClick(operation)}>\r\n            {operation}\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default OperationBtn;\r\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport NumBtn from \"./components/NumBtn\";\nimport OperationBtn from \"./components/OperationBtn\";\nimport {operationEnum} from \"./types/types\";\nimport {Input} from 'antd'\n\nfunction App() {\n    const [firstNum, setFirstNum] = useState<number | undefined>();\n    const [selectOperation, setSelectOperation] = useState<operationEnum | null>(null);\n    const [secondNum, setSecondNum] = useState<number | undefined>();\n    const [displayText, setDisplayText] = useState('');\n\n    const clickHandlerNum = (num: number) => {\n        if (!selectOperation) {\n            if (firstNum === undefined) {\n                setFirstNum(num)\n            } else {\n                let temp: string = firstNum!.toString() + num.toString();\n                setFirstNum(Number(temp))\n            }\n        } else {\n            if (secondNum === undefined) {\n                setSecondNum(num);\n            } else {\n                let temp: string = secondNum!.toString() + num.toString();\n                setSecondNum(Number(temp));\n            }\n\n        }\n    }\n    const clickHandlerOperation = (operation: operationEnum) => {\n        if (operation === operationEnum.clear) {\n            setFirstNum(undefined);\n            setSelectOperation(null);\n            setSecondNum(undefined);\n        } else if (operation as operationEnum === operationEnum.equals) {\n            let result: number = 0;\n            switch (selectOperation) {\n                case operationEnum.fold:\n                    result = firstNum! + secondNum!;\n                    break;\n                case operationEnum.subtract:\n                    result = firstNum! - secondNum!;\n                    break;\n                case operationEnum.multiply:\n                    result = firstNum! * secondNum!;\n                    break;\n                case operationEnum.division:\n                    result = firstNum! / secondNum!;\n                    break;\n                default:\n                    throw new Error('Такой операции не существует');\n                    break;\n            }\n            setFirstNum(result);\n            setSelectOperation(null);\n            setSecondNum(undefined);\n\n        } else {\n            setSelectOperation(operation);\n        }\n    }\n    useEffect(() => {\n        setDisplayText(`${firstNum ?? ''}${selectOperation ?? ''}${secondNum ?? ''}`);\n    }, [firstNum, selectOperation, secondNum])\n\n    return (\n        <div className=\"App\">\n            <div className={\"result_input\"}>\n                <Input  readOnly value={displayText} type={\"text\"}/>\n            </div>\n\n            <div className={\"row\"}>\n                <NumBtn num={7} onClick={() => clickHandlerNum(7)}/>\n                <NumBtn num={8} onClick={() => clickHandlerNum(8)}/>\n                <NumBtn num={9} onClick={() => clickHandlerNum(9)}/>\n                <OperationBtn operation={operationEnum.multiply}\n                              onClick={() => clickHandlerOperation(operationEnum.multiply)}/>\n            </div>\n            <div className={\"row\"}>\n                <NumBtn num={4} onClick={() => clickHandlerNum(4)}/>\n                <NumBtn num={5} onClick={() => clickHandlerNum(5)}/>\n                <NumBtn num={6} onClick={() => clickHandlerNum(6)}/>\n                <OperationBtn operation={operationEnum.subtract}\n                              onClick={() => clickHandlerOperation(operationEnum.subtract)}/>\n            </div>\n            <div className={\"row\"}>\n                <NumBtn num={1} onClick={() => clickHandlerNum(1)}/>\n                <NumBtn num={2} onClick={() => clickHandlerNum(2)}/>\n                <NumBtn num={3} onClick={() => clickHandlerNum(3)}/>\n                <OperationBtn operation={operationEnum.fold} onClick={() => clickHandlerOperation(operationEnum.fold)}/>\n\n            </div>\n            <div className={\"row\"}>\n                <OperationBtn operation={operationEnum.clear}\n                              onClick={() => clickHandlerOperation(operationEnum.clear)}/>\n                <NumBtn num={0} onClick={() => clickHandlerNum(0)}/>\n                <OperationBtn operation={operationEnum.division}\n                              onClick={() => clickHandlerOperation(operationEnum.division)}/>\n                <OperationBtn operation={operationEnum.equals}\n                              onClick={() => clickHandlerOperation(operationEnum.equals)}/>\n\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}