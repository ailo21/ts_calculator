{"version":3,"sources":["types/types.tsx","components/NumBtn.tsx","components/OperationBtn.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["operationEnum","NumBtn","num","onClick","type","shape","OperationBtn","operation","children","App","useState","firstNum","setFirstNum","selectOperation","setSelectOperation","secondNum","setSecondNum","displayText","setDisplayText","inputEl","React","useRef","useEffect","current","focus","clickHandlerNum","undefined","temp","toString","Number","clickHandlerOperation","clear","equals","result","fold","subtract","multiply","division","console","log","className","ref","onKeyUp","event","key","arr","split","pop","join","Backspace","RegExp","test","value","CloseOutlined","MinusOutlined","PlusOutlined","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8JAAYA,E,8ECgBGC,EARiB,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,IAAIC,EAAa,EAAbA,QAClC,OACI,cAAC,IAAD,CAASC,KAAK,QAAQC,MAAM,SAASF,QAAS,kBAAIA,EAAQD,IAA1D,SACKA,KCMEI,EAR4B,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,UAAUJ,EAAsB,EAAtBA,QAAQK,EAAc,EAAdA,SAC3D,OACI,cAAC,IAAD,CAAUJ,KAAK,UAAUC,MAAM,SAAUF,QAAS,kBAAIA,EAAQI,IAA9D,SACKC,M,SFZDR,K,SAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,WAAAA,E,WAAAA,M,yCGoLGS,MA3Kf,WACI,MAAgCC,qBAAhC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8CF,mBAA+B,MAA7E,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAAkCJ,qBAAlC,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAsCN,mBAAS,IAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KACMC,EAAUC,IAAMC,OAAc,MAEpCC,qBAAU,WACFH,EAAQI,SACRJ,EAAQI,QAAQC,UAEtB,IACF,IAAMC,EAAkB,SAACvB,GACrB,GAAKW,EAQD,QAAkBa,IAAdX,EACAC,EAAad,OACV,CACH,IAAIyB,EAAeZ,EAAWa,WAAa1B,EAAI0B,WAC/CZ,EAAaa,OAAOF,SAXxB,QAAiBD,IAAbf,EACAC,EAAYV,OACT,CACH,IAAIyB,EAAehB,EAAUiB,WAAa1B,EAAI0B,WAC9ChB,EAAYiB,OAAOF,MAYzBG,EAAwB,SAACvB,GAC3B,GAAIA,IAAcP,EAAc+B,MAC5BnB,OAAYc,GACZZ,EAAmB,MACnBE,OAAaU,QACV,GAAInB,IAA+BP,EAAcgC,OAAQ,CAC5D,IAAIC,EAAiB,EACrB,OAAQpB,GACJ,KAAKb,EAAckC,KACfD,EAAStB,EAAYI,EACrB,MACJ,KAAKf,EAAcmC,SACfF,EAAStB,EAAYI,EACrB,MACJ,KAAKf,EAAcoC,SACfH,EAAStB,EAAYI,EACrB,MACJ,KAAKf,EAAcqC,SACfJ,EAAStB,EAAYI,EACrB,MACJ,QAEIuB,QAAQC,IAAI,6JAGpB3B,EAAYqB,GACZnB,EAAmB,MACnBE,OAAaU,QAGbZ,EAAmBP,IAyD3B,OAJAe,qBAAU,WACNJ,EAAe,GAAD,cAAIP,QAAJ,IAAIA,IAAY,IAAhB,cAAqBE,QAArB,IAAqBA,IAAmB,IAAxC,cAA6CE,QAA7C,IAA6CA,IAAa,OACzE,CAACJ,EAAUE,EAAiBE,IAG3B,sBAAKyB,UAAU,MAAf,UACI,qBAAKA,UAAW,eAAhB,SACI,cAAC,IAAD,CAAOC,IAAKtB,EAASuB,QAxDjC,SAAwBC,GAEpB,OAAQA,EAAMC,KACV,IAAK,aAgCb,WACI,QAAkBlB,IAAdX,EAAyB,CACzB,IAAI8B,EAAM9B,EAAUa,WAAWkB,MAAM,IACrCD,EAAIE,MACJ/B,EAAaa,OAAOgB,EAAIG,KAAK,WAC1B,GAAwB,OAApBnC,EACPC,EAAmB,WAChB,QAAiBY,IAAbf,EAAwB,CAC/B,IAAIkC,EAAMlC,EAASiB,WAAWkB,MAAM,IACpCD,EAAIE,MACJnC,EAAYiB,OAAOgB,EAAIG,KAAK,OAzCxBC,GACA,MACJ,IAAK,IACDnB,EAAsB9B,EAAckC,MACpC,MACJ,IAAK,IACDJ,EAAsB9B,EAAcmC,UACpC,MACJ,IAAK,IACDL,EAAsB9B,EAAcoC,UACpC,MACJ,IAAK,IACDN,EAAsB9B,EAAcqC,UACpC,MACJ,IAAK,QAGL,IAAK,IACDP,EAAsB9B,EAAcgC,QAO1B,IAAIkB,OAAO,SACfC,KAAKR,EAAMC,MACrBnB,EAAgBI,OAAOc,EAAMC,OAyBqBQ,MAAOnC,EAAab,KAAM,WAG5E,sBAAKoC,UAAW,MAAhB,UACI,cAAC,EAAD,CAAQtC,IAAK,EAAGC,QAAS,kBAAMsB,EAAgB,MAC/C,cAAC,EAAD,CAAQvB,IAAK,EAAGC,QAAS,kBAAMsB,EAAgB,MAC/C,cAAC,EAAD,CAAQvB,IAAK,EAAGC,QAAS,kBAAMsB,EAAgB,MAC/C,cAAC,EAAD,CAAclB,UAAWP,EAAcoC,SACzBjC,QAAS,kBAAM2B,EAAsB9B,EAAcoC,WADjE,SAEI,cAACiB,EAAA,EAAD,SAGR,sBAAKb,UAAW,MAAhB,UACI,cAAC,EAAD,CAAQtC,IAAK,EAAGC,QAAS,kBAAMsB,EAAgB,MAC/C,cAAC,EAAD,CAAQvB,IAAK,EAAGC,QAAS,kBAAMsB,EAAgB,MAC/C,cAAC,EAAD,CAAQvB,IAAK,EAAGC,QAAS,kBAAMsB,EAAgB,MAC/C,cAAC,EAAD,CAAclB,UAAWP,EAAcmC,SACzBhC,QAAS,kBAAM2B,EAAsB9B,EAAcmC,WADjE,SAEI,cAACmB,EAAA,EAAD,SAGR,sBAAKd,UAAW,MAAhB,UACI,cAAC,EAAD,CAAQtC,IAAK,EAAGC,QAAS,kBAAMsB,EAAgB,MAC/C,cAAC,EAAD,CAAQvB,IAAK,EAAGC,QAAS,kBAAMsB,EAAgB,MAC/C,cAAC,EAAD,CAAQvB,IAAK,EAAGC,QAAS,kBAAMsB,EAAgB,MAC/C,cAAC,EAAD,CAAclB,UAAWP,EAAckC,KAAM/B,QAAS,kBAAM2B,EAAsB9B,EAAckC,OAAhG,SACI,cAACqB,EAAA,EAAD,SAIR,sBAAKf,UAAW,MAAhB,UACI,cAAC,EAAD,CAAcjC,UAAWP,EAAc+B,MACzB5B,QAAS,kBAAM2B,EAAsB9B,EAAc+B,QADjE,SAEI,uCAEJ,cAAC,EAAD,CAAQ7B,IAAK,EAAGC,QAAS,kBAAMsB,EAAgB,MAC/C,cAAC,EAAD,CAAclB,UAAWP,EAAcqC,SACzBlC,QAAS,kBAAM2B,EAAsB9B,EAAcqC,WADjE,SAEI,uCAEJ,cAAC,EAAD,CAAc9B,UAAWP,EAAcgC,OACzB7B,QAAS,kBAAM2B,EAAsB9B,EAAcgC,SADjE,SAEI,8CC7JLwB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a515de8b.chunk.js","sourcesContent":["export enum operationEnum {\r\n    fold = \"+\",\r\n    subtract = \"-\",\r\n    multiply = \"*\",\r\n    division = \"/\",\r\n    equals = \"=\",\r\n    clear = \"c\",\r\n}","import React, {FC} from 'react';\r\nimport { Button} from 'antd';\r\n\r\ninterface NumBtnProps {\r\n    num: number,\r\n    onClick: (num:number) => void\r\n}\r\n\r\nconst NumBtn: FC<NumBtnProps> = ({num,onClick}) => {\r\n    return (\r\n        <Button  type=\"ghost\" shape=\"circle\" onClick={()=>onClick(num)}>\r\n            {num}\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default NumBtn;\r\n","import React, {FC} from 'react';\r\nimport {operationEnum} from \"../types/types\";\r\nimport { Button} from 'antd';\r\n\r\ninterface OperationBtnProps{\r\n    operation:operationEnum,\r\n    onClick:(operation:operationEnum)=>void\r\n}\r\n\r\nconst OperationBtn:FC<OperationBtnProps> = ({operation,onClick,children}) => {\r\n    return (\r\n        <Button   type=\"primary\" shape=\"circle\"  onClick={()=>onClick(operation)} >\r\n            {children}\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default OperationBtn;\r\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport NumBtn from \"./components/NumBtn\";\nimport OperationBtn from \"./components/OperationBtn\";\nimport {operationEnum} from \"./types/types\";\nimport {Input} from 'antd'\nimport {CloseOutlined, MinusOutlined, PlusOutlined} from '@ant-design/icons';\n\nfunction App() {\n    const [firstNum, setFirstNum] = useState<number | undefined>();\n    const [selectOperation, setSelectOperation] = useState<operationEnum | null>(null);\n    const [secondNum, setSecondNum] = useState<number | undefined>();\n    const [displayText, setDisplayText] = useState('');\n    const inputEl = React.useRef<Input>(null);\n\n    useEffect(()=>{\n        if (inputEl.current){\n            inputEl.current.focus()\n        }\n    },[]);\n    const clickHandlerNum = (num: number) => {\n        if (!selectOperation) {\n            if (firstNum === undefined) {\n                setFirstNum(num)\n            } else {\n                let temp: string = firstNum!.toString() + num.toString();\n                setFirstNum(Number(temp))\n            }\n        } else {\n            if (secondNum === undefined) {\n                setSecondNum(num);\n            } else {\n                let temp: string = secondNum!.toString() + num.toString();\n                setSecondNum(Number(temp));\n            }\n\n        }\n    }\n    const clickHandlerOperation = (operation: operationEnum) => {\n        if (operation === operationEnum.clear) {\n            setFirstNum(undefined);\n            setSelectOperation(null);\n            setSecondNum(undefined);\n        } else if (operation as operationEnum === operationEnum.equals) {\n            let result: number = 0;\n            switch (selectOperation) {\n                case operationEnum.fold:\n                    result = firstNum! + secondNum!;\n                    break;\n                case operationEnum.subtract:\n                    result = firstNum! - secondNum!;\n                    break;\n                case operationEnum.multiply:\n                    result = firstNum! * secondNum!;\n                    break;\n                case operationEnum.division:\n                    result = firstNum! / secondNum!;\n                    break;\n                default:\n                    // throw new Error('Такой операции не существует');\n                    console.log('Такой операции не существует')\n                    break;\n            }\n            setFirstNum(result);\n            setSelectOperation(null);\n            setSecondNum(undefined);\n\n        } else {\n            setSelectOperation(operation);\n        }\n    }\n\n    function handleKeyPress(event: React.KeyboardEvent): any {\n\n        switch (event.key) {\n            case 'Backspace':\n                Backspace()\n                break;\n            case '+':\n                clickHandlerOperation(operationEnum.fold)\n                break;\n            case '-':\n                clickHandlerOperation(operationEnum.subtract)\n                break;\n            case '*':\n                clickHandlerOperation(operationEnum.multiply)\n                break;\n            case '/':\n                clickHandlerOperation(operationEnum.division)\n                break;\n            case 'Enter':\n                clickHandlerOperation(operationEnum.equals)\n                break;\n            case '=':\n                clickHandlerOperation(operationEnum.equals)\n                break;\n            default:\n                debugger;\n                break;\n        }\n\n        const regExpNum = new RegExp(/\\d{1}/);\n        if (regExpNum.test(event.key)) {\n            clickHandlerNum(Number(event.key));\n        }\n    }\n\n    function Backspace() {\n        if (secondNum !== undefined) {\n            let arr = secondNum.toString().split('');\n            arr.pop();\n            setSecondNum(Number(arr.join('')));\n        } else if (selectOperation !== null) {\n            setSelectOperation(null);\n        } else if (firstNum !== undefined) {\n            let arr = firstNum.toString().split('');\n            arr.pop();\n            setFirstNum(Number(arr.join('')));\n        }\n    }\n\n    useEffect(() => {\n        setDisplayText(`${firstNum ?? ''}${selectOperation ?? ''}${secondNum ?? ''}`);\n    }, [firstNum, selectOperation, secondNum])\n\n    return (\n        <div className=\"App\">\n            <div className={\"result_input\"}>\n                <Input ref={inputEl} onKeyUp={handleKeyPress} value={displayText} type={\"text\"}/>\n            </div>\n\n            <div className={\"row\"}>\n                <NumBtn num={7} onClick={() => clickHandlerNum(7)}/>\n                <NumBtn num={8} onClick={() => clickHandlerNum(8)}/>\n                <NumBtn num={9} onClick={() => clickHandlerNum(9)}/>\n                <OperationBtn operation={operationEnum.multiply}\n                              onClick={() => clickHandlerOperation(operationEnum.multiply)}>\n                    <CloseOutlined/>\n                </OperationBtn>\n            </div>\n            <div className={\"row\"}>\n                <NumBtn num={4} onClick={() => clickHandlerNum(4)}/>\n                <NumBtn num={5} onClick={() => clickHandlerNum(5)}/>\n                <NumBtn num={6} onClick={() => clickHandlerNum(6)}/>\n                <OperationBtn operation={operationEnum.subtract}\n                              onClick={() => clickHandlerOperation(operationEnum.subtract)}>\n                    <MinusOutlined/>\n                </OperationBtn>\n            </div>\n            <div className={\"row\"}>\n                <NumBtn num={1} onClick={() => clickHandlerNum(1)}/>\n                <NumBtn num={2} onClick={() => clickHandlerNum(2)}/>\n                <NumBtn num={3} onClick={() => clickHandlerNum(3)}/>\n                <OperationBtn operation={operationEnum.fold} onClick={() => clickHandlerOperation(operationEnum.fold)}>\n                    <PlusOutlined/>\n                </OperationBtn>\n\n            </div>\n            <div className={\"row\"}>\n                <OperationBtn operation={operationEnum.clear}\n                              onClick={() => clickHandlerOperation(operationEnum.clear)}>\n                    <span>C</span>\n                </OperationBtn>\n                <NumBtn num={0} onClick={() => clickHandlerNum(0)}/>\n                <OperationBtn operation={operationEnum.division}\n                              onClick={() => clickHandlerOperation(operationEnum.division)}>\n                    <span>/</span>\n                </OperationBtn>\n                <OperationBtn operation={operationEnum.equals}\n                              onClick={() => clickHandlerOperation(operationEnum.equals)}>\n                    <span>=</span>\n                </OperationBtn>\n\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}